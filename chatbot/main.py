import logging
from uvicorn import Config, Server
from fastapi import FastAPI, HTTPException, Header
from model import QueryResponseElement
from retrieve import retrieveResponse
from config import Config as ChatbotConfig


# Set up logging
logging.basicConfig(
	level=ChatbotConfig.LOG_LEVEL,
	format=ChatbotConfig.LOG_FORMAT,
	handlers=[
		logging.FileHandler(ChatbotConfig.LOG_FILE, mode="a")
	]
)
logger = logging.getLogger(__name__)

app = FastAPI()
uvicornConfig = Config(
    app, 
    host=ChatbotConfig.API_HOST,
    port=ChatbotConfig.API_PORT,
    log_level = "info",
    reload=True
)

def getLanguage(language: str=None):
    if language == "en":
        return "en"
    elif language == "sr":
        return "sr"
    elif language == "ru":
        return "ru"
    else:
        return ChatbotConfig.API_DEFAULT_LANGUAGE

@app.post("/query")
async def getResponse(query: QueryResponseElement, accept_language: str=Header(None)) -> QueryResponseElement:
    if query.is_rag_used is None or query.is_rag_used not in [True, False]:
        raise HTTPException(
            status_code=400, 
            detail=f"Please pass a value to the 'is_rag_used' element to enable/disable retrieval-augmented generation."
        )
    elif not query.query.chat_message or query.query.chat_message == "":
        raise HTTPException(
            status_code=400, 
            detail=f"Please provide a valid (non-empty) query in the 'query' element."
        )
    else:
        language = getLanguage(accept_language)
        logger.debug(f"Query object: {query}")
        retrieveResponse(query=query, language=language)
        if not query.response:
            raise HTTPException(
                status_code=400,
                detail=f"The chatbot has failed to generate a response. Please try again!"
            )
        logger.info(f"The response generated by the Chatbot:\n{query.response.chat_message}")
        return query


if __name__ == "__main__":
    server = Server(uvicornConfig)
    server.run()