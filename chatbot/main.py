import helper
from uvicorn import Config, Server
from fastapi import FastAPI, HTTPException
from chat_element import ChatElement
from retrieve import retrieveResponse
from config import Config as ChatbotConfig

logger = helper.getFileLogger(__name__)
app = FastAPI()
uvicornConfig = Config(
    app, 
    host=ChatbotConfig.API_HOST,
    port=ChatbotConfig.API_PORT,
    log_level = "info",
    reload=True
)

@app.post("/query")
async def getResponse(query: ChatElement) -> ChatElement:
    if query.isRagUsed is None or query.isRagUsed not in [True, False]:
        raise HTTPException(
            status_code=400, 
            detail=f"Please pass a value to the 'isRagUsed' element to enable/disable retrieval-augmented generation."
        )
    elif query.query is None or query.query == "":
        raise HTTPException(
            status_code=400, 
            detail=f"Please provide a valid (non-empty) query and try again."
        )
    else:
        response = retrieveResponse(chatElementQuery=query)
        logger.debug(f"The response generated by the Chatbot:\n{response}")
        return response

if __name__ == "__main__":
    server = Server(uvicornConfig)
    server.run()